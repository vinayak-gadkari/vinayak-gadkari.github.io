<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
<channel><title>Technoholic</title><link>https://vinayak-gadkari.github.io/index.html</link>
<description>Programming and Productivity tips and tricks</description><language>en</language>
<lastBuildDate>Sun, 07 Feb 2021 12:38:52 +0530</lastBuildDate>
<pubDate>Sun, 07 Feb 2021 12:38:52 +0530</pubDate>
<atom:link href="https://vinayak-gadkari.github.io/feed.rss" rel="self" type="application/rss+xml" />
<item><title>
Master any tool with fuzzy search and aliases
</title><description><![CDATA[

<p><img src="assets/tool-icon.jpg" alt="tool-icon" /></p>

<p>Mastering any tool requires learning what that tool does and how we can effectively use it. For example, we know that a simple mechanical tool like a hammer hammers in nails, has to be struck over a nail held in an upright manner until the nail goes in properly. On the other hand, software tools offer a huge variety of commands and options for each command and it becomes difficult to store all those command and options in your brain. </p>

<p>Aliases offer a second brain way to store all those commands in   config files and also rename commands with intuitive names. Not all tools offer aliases though. Secondly aliases tend to grow over time and remembering those aliases itself becomes a big hassle. Enter fuzzy search. With these two techniques one can virtually master any tool, let me show you how…</p>

<hr />
]]></description><link>https://vinayak-gadkari.github.io/master-any-tool-with-fuzzy-search-and-aliases.html</link>
<guid>https://vinayak-gadkari.github.io/./master-any-tool-with-fuzzy-search-and-aliases.html</guid>
<dc:creator>Vinayak Gadkari</dc:creator>
<pubDate>Sun, 07 Feb 2021 12:38:47 +0530</pubDate></item>
<item><title>
Proof reading and spell checking
</title><description><![CDATA[

<p><img src="assets/spellcheck-title.jpg" alt="spellcheck-title" /></p>

<p>Error proofing communication content is a vital part of any trade. Even people with strong grammar and spelling skills tend to make poor mistakes. Word processors like MS Word make help but they are not available every time, for example when one starts typing in notepad or other applications. You do not want to open an application which is slow to start and hogs memory just for doing a simple spell-check. The process of manual re-checking contents can be painful, however there are myriad of tools available that can make this process less laborious. Here’s a dash of such tools:</p>

<hr />
]]></description><link>https://vinayak-gadkari.github.io/proof-reading-and-spell-checking15261.html</link>
<guid>https://vinayak-gadkari.github.io/./proof-reading-and-spell-checking15261.html</guid>
<dc:creator>Vinayak Gadkari</dc:creator>
<pubDate>Sat, 06 Feb 2021 22:41:44 +0530</pubDate></item>
<item><title>
SIP for your health
</title><description><![CDATA[

<p><img src="assets/health-is-wealth.jpg" alt="health-is-wealth" /></p>

<p><a href="http://en.wikipedia.org/wiki/Systematic_Investment_Plan">SIP (Systematic Investment Plan)</a> seems to be the rage nowadays where everyone worth his financial acumen rants about the merits of SIP. That takes care of the <em>dhan</em> (wealth) part, what about the <em>tan</em> (physical health) part? In fact, this requires a more disciplined SIP and has more long term and beneficial effects. Sounds logical? Here we go…</p>

<hr />
]]></description><link>https://vinayak-gadkari.github.io/sip-for-your-health.html</link>
<guid>https://vinayak-gadkari.github.io/./sip-for-your-health.html</guid>
<dc:creator>Vinayak Gadkari</dc:creator>
<pubDate>Sat, 06 Feb 2021 22:32:10 +0530</pubDate></item>
<item><title>
Backing up WordPress
</title><description><![CDATA[

<p><img src="assets/wordpress-icon.png" alt="wordpress-icon" /></p>

<p>Backup has been on my mind, since I started blogging on WordPress. No blog owner wants to go through the pain of losing his ideas and re-creating his writings again.</p>

<p>After a night worth of efforts, here’s a simple script to backup a WordPress.com hosted blog in two ways.</p>

<hr />
]]></description><link>https://vinayak-gadkari.github.io/backing-up-wordpress.html</link>
<guid>https://vinayak-gadkari.github.io/./backing-up-wordpress.html</guid>
<dc:creator>Vinayak Gadkari</dc:creator>
<pubDate>Sat, 06 Feb 2021 22:25:30 +0530</pubDate></item>
<item><title>
Code Review with ReviewBoard
</title><description><![CDATA[

<p><img src="assets/reviewboard-icon.png" alt="reviewboard-icon" /></p>

<h2 id="_why_reviewboard_">Why ReviewBoard</h2>

<p>After having tried out various review methods like direct review, reviews over email, pair programming etc, I have found that a combination of tool-assisted code review and direct review (on an as needed basis) works out to be the best in terms of efforts spent and quality of the output.
<a href="http://support.smartbear.com/">SmartNBear.com:Pros and Cons of Four Kinds of Code</a> mentions the pros and cons of the various types of reviews.</p>

<hr />
]]></description><link>https://vinayak-gadkari.github.io/code-review-with-reviewboard11363.html</link>
<guid>https://vinayak-gadkari.github.io/./code-review-with-reviewboard11363.html</guid>
<dc:creator>Vinayak Gadkari</dc:creator>
<pubDate>Sat, 06 Feb 2021 22:20:53 +0530</pubDate></item>
<item><title>
Inspirational Quotes ON the desktop
</title><description><![CDATA[

<p><img src="assets/quotes-title.jpeg" alt="quotes-title" /></p>

<p>I try to keep my desktop clean so that I can display only the items that require my immediate attention. I also like to start my day with an inspirational quote. Since the desktop is the first thing one sees after booting up the system in the morning, here is a <a href="http://blogs.hbr.org/cs/2010/01/jugaad_a_new_growth_formula_fo.html">jugaad </a>that uses <a href="http://www.autohotkey.com/">Autohotkey</a> and <a href="http://technet.microsoft.com/en-us/sysinternals/bb897557">bginfo</a> to put a random quote on your desktop.</p>

<p>I initially tried out <a href="http://www.howtogeek.com/howto/35980/how-to-display-a-quote-on-your-desktop-using-rainmeter/">Rainmeter</a> and <a href="http://lifehacker.com/213280/geek-to-live--incorporate-text-files-onto-your-desktop">Samurize</a>, but found them a bit too heavy for this simple application. Here is a way to do this without using any third part tools.</p>

<hr />
]]></description><link>https://vinayak-gadkari.github.io/inspirational-quotes-on-the-desktop.html</link>
<guid>https://vinayak-gadkari.github.io/./inspirational-quotes-on-the-desktop.html</guid>
<dc:creator>Vinayak Gadkari</dc:creator>
<pubDate>Sat, 06 Feb 2021 22:06:05 +0530</pubDate></item>
<item><title>
Tomcat: Class loaders mechanism
</title><description><![CDATA[

<p><img src="assets/tomcat-webserver.jpg" alt="tomcat-webserver" /></p>

<p>Tomcat creates the class-loaders with the parent-child hierarchy as shown in the diagram. The class loading is fairly intuitive. However a pragmatic developer needs to understand it properly to avoid problem with class instantiation since it differs a bit from the typical Java class loading mechanism.</p>

<hr />
]]></description><link>https://vinayak-gadkari.github.io/tomcat-class-loaders-mechanism.html</link>
<guid>https://vinayak-gadkari.github.io/./tomcat-class-loaders-mechanism.html</guid>
<dc:creator>Vinayak Gadkari</dc:creator>
<pubDate>Sat, 06 Feb 2021 21:58:14 +0530</pubDate></item>
<item><title>
Tomcat: Accessing web app classes from shared libraries
</title><description><![CDATA[

<p><img src="assets/tomcat-webserver.jpg" alt="tomcat-webserver" /></p>

<p>It is not a recommended practise to have libraries placed in Tomcat’s lib directory to access classes in a web application. However, there are cases when you may want to flout this practise. Tomcat’s class loading mechanism will not allow you to do so since the web classes and the lib classes are loaded by different class loaders. The workaround in such a case is to use a custom bootstrap loader. This loader should be used to load all the application specific classes.</p>

<hr />
]]></description><link>https://vinayak-gadkari.github.io/tomcat-accessing-web-app-classes-from-shared-libraries.html</link>
<guid>https://vinayak-gadkari.github.io/./tomcat-accessing-web-app-classes-from-shared-libraries.html</guid>
<dc:creator>Vinayak Gadkari</dc:creator>
<pubDate>Sat, 06 Feb 2021 21:53:02 +0530</pubDate></item>
<item><title>
Personal Kanban on the desktop
</title><description><![CDATA[

<p><a href="http://www.personalkanban.com/pk/personal-kanban-the-book/"><img src="https://i0.wp.com/neuf.ivillage.cc/pk/wordpress/wp-content/uploads/2010/08/book-cover-thumb.png" alt="Personal Kanban book" /></a></p>

<p>I have been a GTD (<a href="http://www.amazon.com/Getting-Things-Done-Stress-Free-Productivity/dp/0142000280">Getting Things Done</a>) fan as well as an agile practitioner for years. GTD advocates creating hard deadlines so that your slate is always clean. I have been finding this tough to manage as the WIP (work in progress) has been slowly increasing each day. <a href="http://www.amazon.com/Personal-Kanban-Mapping-Work-Navigating/dp/1453802266">Personal Kanban</a> by Jim Benson and Tonianne DeMaria Barry provided a refreshing view.</p>

<hr />
]]></description><link>https://vinayak-gadkari.github.io/personal-kanban-on-the-desktop20403.html</link>
<guid>https://vinayak-gadkari.github.io/./personal-kanban-on-the-desktop20403.html</guid>
<dc:creator>Vinayak Gadkari</dc:creator>
<pubDate>Sat, 06 Feb 2021 10:59:45 +0530</pubDate></item>
<item><title>
Naked Objects–Really Naked?
</title><description><![CDATA[

<p><img src="assets\naked-objects-icon.jpg" alt="naked-objects-icon" /></p>

<p>Naked Objects is an eye catching name. No wonder that it has been demonstrated at the OOPSLA 2001 conference under the banner of Intriguing Technologies.</p>

<p>Copyright (c) 2002 nakedobjects.org</p>

<h2 id="_the_naked_objects_pattern_">The Naked Objects Pattern</h2>

<ul>
<li>Design behaviourally complete domain objects i.e.- Encapsulate all the behaviour/functionality within the domain objects.</li>
<li>Single point definition: All the representations of a domain object such as user-interface, database-mapping, should be derived automatically from the domain object class itself.</li>
<li>Object-oriented user-interface (OOUI): By exposing behaviourally-complete objects, users can view and interact with underlying domain</li>
</ul>

<hr />
]]></description><link>https://vinayak-gadkari.github.io/naked-objects-really-naked.html</link>
<guid>https://vinayak-gadkari.github.io/./naked-objects-really-naked.html</guid>
<dc:creator>Vinayak Gadkari</dc:creator>
<pubDate>Sat, 06 Feb 2021 10:54:55 +0530</pubDate></item>
</channel></rss>
